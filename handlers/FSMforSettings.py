from misc import dp, bot, connection as conn

from features.dbInteractions import \
	addUser,                        \
	updateUserSettings,             \
	getPhotoReceivedUserSettings,   \
	getUserStats, change_nickname,  \
	get_nick_by_id                  #

from aiogram.utils import exceptions
from aiogram.types import       \
	Message, inline_keyboard,   \
	CallbackQuery               #
from aiogram.dispatcher import      \
	filters, FSMContext             #
from aiogram.utils import markdown
from aiogram.dispatcher.filters.state import    \
	State,                                      \
	StatesGroup                                 #

from typing import Optional


class SettingsFSM(StatesGroup):
	changingNickname = State()


async def systemAnswer(message: Message, text: str = "–û—à–∏–±–∫–∞", markup=None):
	"""–í–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Ç–µ–∫—Å—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–∫ –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï (–∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ)"""
	if markup:
		await message.answer(
			markdown.code(text),
			reply_markup=markup,
			parse_mode='MarkdownV2'
		)
	else:
		await message.answer(
			markdown.code(text),
			parse_mode='MarkdownV2'
		)


def buttonsList(*args, rowWidth: int = 2):
	buttons = list(
			inline_keyboard.InlineKeyboardButton(text=text,	callback_data=data)
			for text, data in args[0]
	)

	length = len(buttons)
	lastRowWidth = length % rowWidth

	formattedButtons = [buttons[i:i + rowWidth] for i in range(0, length - lastRowWidth, rowWidth)]
	formattedButtons.append(buttons[length - lastRowWidth: length])

	return formattedButtons


def photoReceivedOptionConversion(option: str) -> str:
	optionsList = [
		["–î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä", "demotivator"],
		["–°–ª—É—á–∞–π–Ω—ã–π –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä", "randomDemotivator"],
		["–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞", "QRdecode"],
		["–ù–∏—á–µ–≥–æ", "nothing"]
	]

	translated = [options[(options.index(option) + 1) % 2] for options in optionsList if option in options]

	return translated[0]


# ----------- HANDLERS -------------------------------------------------------------------------------------------------


@dp.message_handler(filters.Text(equals="–ù–∞—Å—ÇœÅ–æ–π–∫–∏"), state=None)
@dp.message_handler(commands=["settings"])
async def settingsCallingHandler(message: Message, isBack: bool = False, userID: int = None):
	"""–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
	if not isBack:
		addUser(message.from_user.id)
	if not userID:
		userID = message.chat.id

	buttonsData = [
		["–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ", "photoReceivedChanging"],
		["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "statistics"],
		["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫", "changeNickname"],
	]

	buttons = buttonsList(buttonsData, rowWidth=2)
	reply_markup = inline_keyboard.InlineKeyboardMarkup(row_width=1, inline_keyboard=buttons)

	username = get_nick_by_id(userID)

	text = f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, {username}?"

	if not isBack:		# –°–æ–∑–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑–≤–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		await message.answer(text=text, reply_markup=reply_markup)
	else:				# –ò–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "back"
		await bot.edit_message_text(
			text=text,
			reply_markup=reply_markup,
			chat_id=message.chat.id,
			message_id=message.message_id
		)


@dp.callback_query_handler(filters.Text(equals="statistics"))
async def statisticsCallingCallbackHandler(callback_query: CallbackQuery, isUpdate: bool = False):
	message = callback_query.message

	buttonsData = [
		["–û–±–Ω–æ–≤–∏—Ç—å", "update"],
		["‚Üê–ù–∞–∑–∞–¥", "back"]
	]

	buttons = buttonsList(buttonsData, rowWidth=2)
	reply_markup = inline_keyboard.InlineKeyboardMarkup(row_width=2, inline_keyboard=buttons)

	userStats = getUserStats(userID=callback_query.from_user.id)

	text = markdown.bold("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n") + \
	       "–°–æ–∑–¥–∞–Ω–æ –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–æ–≤ ‚Äî " + markdown.italic(f"{userStats['demoCreated']}\n") + \
	       "–í—ã–ø–æ–ª–Ω–µ–Ω–æ inline\-–∫–æ–º–º–∞–Ω–¥ ‚Äî " + markdown.italic(f"{userStats['inlineAnswered']}\n")

	try:
		await bot.edit_message_text(
			text=text,
			reply_markup=reply_markup,
			parse_mode='MarkdownV2',
			chat_id=message.chat.id,
			message_id=message.message_id
		)

		if isUpdate:
			await callback_query.answer(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
	except exceptions.MessageNotModified:
		await callback_query.answer(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –ø–æ–º–µ–Ω—è–ª–∞—Å—å")


@dp.callback_query_handler(filters.Text(equals="update"))
async def updateStatisticsCallbackHandler(callback_query: CallbackQuery):
	await statisticsCallingCallbackHandler(callback_query, isUpdate=True)


@dp.callback_query_handler(filters.Text(equals="changeNickname"))
async def NicknameChangingCallbackHandler(callback_query: CallbackQuery = None, state: FSMContext = None,
										  isUpdate: bool = False):
	if callback_query:
		await SettingsFSM.changingNickname.set()
		async with state.proxy() as data:
			data['callback_query'] = callback_query

	async with state.proxy() as data:
		callback_query = data['callback_query']
		message = callback_query.message

	buttonsData = [
		["–û–±–Ω–æ–≤–∏—Ç—å", "updateNickname"],
		["‚Üê–ù–∞–∑–∞–¥", "back"]
	]

	buttons = buttonsList(buttonsData, rowWidth=2)
	reply_markup = inline_keyboard.InlineKeyboardMarkup(row_width=2, inline_keyboard=buttons)

	nickname = get_nick_by_id(callback_query.from_user.id)

	text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + markdown.bold(f"{nickname}!\n\n") + \
	       markdown.italic("–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º?\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ (–¥–æ 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤)")

	try:
		await bot.edit_message_text(
			text=text,
			reply_markup=reply_markup,
			parse_mode='MarkdownV2',
			chat_id=message.chat.id,
			message_id=message.message_id
		)

		if isUpdate:
			await callback_query.answer(text="–ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
	except exceptions.MessageNotModified:
		await callback_query.answer(text="–ù–µ –æ–±–º–∞–Ω—ã–≤–∞–π –ª–∏—Å—ë–Ω–∫–∞ ü•∫")


@dp.callback_query_handler(filters.Text(equals="updateNickname"), state="*")
async def updateNicknameCallbackHandler(callback_query: CallbackQuery, state: FSMContext):
	await SettingsFSM.changingNickname.set()
	await NicknameChangingCallbackHandler(callback_query=callback_query, isUpdate=True, state=state)


@dp.message_handler(state=SettingsFSM.changingNickname)
async def updateNickname(message: Message, state: FSMContext):
	if len(message.text) <= 20:
		userID = message.from_user.id
		new_nickname = message.text

		change_nickname(userID, new_nickname)
		await message.answer(
			markdown.italic('–ù–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ') +
			markdown.bold(f'{new_nickname}') + '.',
			parse_mode='markdown')

		async with state.proxy() as data:
			callback_query = data['callback_query']
			message = callback_query.message

		await settingsCallingHandler(message, isBack=True, userID=userID)
	else:
		await message.answer("–ú–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–æ—á–µ?")


@dp.callback_query_handler(filters.Text(equals="photoReceivedChanging"))
async def photoReceivedCallingCallbackHandler(callback_query: CallbackQuery):
	message = callback_query.message
	userID = callback_query.from_user.id

	buttonsData = [
		["–î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä", "demotivator"],
		["–°–ª—É—á–∞–π–Ω—ã–π –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä", "randomDemotivator"],
		["–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞", "QRdecode"],
		["–ù–∏—á–µ–≥–æ", "nothing"],
		["‚Üê–ù–∞–∑–∞–¥", "back"]
	]

	buttons = buttonsList(buttonsData, rowWidth=2)
	reply_markup = inline_keyboard.InlineKeyboardMarkup(row_width=2, inline_keyboard=buttons)

	currentOption = photoReceivedOptionConversion(getPhotoReceivedUserSettings(userID))

	text = "–¢–µ–∫—É—â–∞—è –æ–ø—Ü–∏—è ‚Äî " + markdown.bold(f"{currentOption}") + "\n\n"  \
	       "–ß—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?"

	await bot.edit_message_text(
		text=text,
		reply_markup=reply_markup,
		parse_mode='MarkdownV2',
		chat_id=message.chat.id,
		message_id=message.message_id
	)


@dp.callback_query_handler(regexp=r"back", state='*')
async def backCallbackHandler(callback_query: CallbackQuery, state: FSMContext):
	await state.finish()

	message = callback_query.message
	user_id = callback_query.from_user.id

	await settingsCallingHandler(message, isBack=True, userID=user_id)


@dp.callback_query_handler(regexp=r"demotivator|randomDemotivator|QRdecode|nothing|back")
async def photoReceivedChangingCallbackHandler(callback_query: CallbackQuery):
	data = callback_query.data
	userID = callback_query.from_user.id

	currentOption = getPhotoReceivedUserSettings(userID)

	if data == currentOption:
		await bot.answer_callback_query(callback_query.id, text="")
		return

	updateUserSettings(userID, photoReceived=data)

	await photoReceivedCallingCallbackHandler(callback_query)
	await bot.answer_callback_query(callback_query.id, text="Successful!")


# ^-^
