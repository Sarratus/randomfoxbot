from misc import dp, bot, ytApiKey

from resources.links import                         \
	foxLogoPreview,         helpImages              #

from features.mainFunctions import                  \
	yesOrNot,               orDecider,              \
	getRandomWikiArticle,   getRandomYoutubeVideo,  \
	randomPopGenerator,     randomRating            #


from aiogram.types import InlineQueryResultArticle
from aiogram.types import InputTextMessageContent
from aiogram.types import InlineQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.utils import markdown


from random import choice, randint
from time import time

import re


helpList = \
	[
		[
			'–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∏–∂–µ:',

			'–Ø —Ç–µ–±–µ –ø–æ–º–æ–≥—É üòä',

			'',

			'–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –õ–∏—Å–∞ –∑–∞–∫–ª—é—á–µ–Ω–∞ –≤ inline\\-–∫–æ–º–∞–Ω–¥–∞—Ö\\. '
			'–ö–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ—á–Ω—ã–º–∏, —Ç–∞–∫ –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏\\. '
			'–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö –æ–ø–∏—Å–∞–Ω—ã –∑–¥–µ—Å—å\\. –ö–ª–∏–∫–Ω—É–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –° –ü–†–ò–ú–ï–†–û–ú\\!'
	], [
		'–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ ü§ì',

		'–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ c \"=\" –Ω–∞ –∫–æ–Ω—Ü–µ',

		'2+2*2=',

		"–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –∏–∑ —á–∏—Å–µ–ª –∏ –ø—Ä–æ—Å—Ç–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, "
		"–≤—Ä–æ–¥–µ 2\\+2\\*2, –Ω—É, –∏–ª–∏ 8/2; –í–æ–æ–±—â–µ –∫–∞–∫–æ–µ —Ö–æ—Ç–∏—Ç–µ\\! –ì–ª–∞–≤–Ω–æ–µ, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–∏–π—Å—è –Ω–∞ –∑–Ω–∞–∫ \"\\=\"\\. "
		"–õ–∏—Å –ø–æ—Å—á–∏—Ç–∞–µ—Ç –≤ —Å—Ç–æ–ª–±–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π \\(–Ø –µ—â—ë —Ç–æ–ª—å–∫–æ —É—á—É—Å—å, –Ω–µ —Ä—É–≥–∞–π—Ç–µ—Å—å üò£\\!\\!\\)"
	], [
		'–°–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞—Ç—å—é –∏–∑ –≤–∏–∫–∏? üò≥',

		'–¢–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏ \"wiki\"',

		'wiki',

		"–í–≤–µ–¥–∏ –≤ —á–∞—Ç \"wiki\" –∏–ª–∏ \"wikipedia\", –∏ –õ–∏—Å—ë–Ω–æ–∫ –±—ã—Å—Ç—Ä–æ —Å–±–µ–≥–∞–µ—Ç –¥–æ –í–∏–∫–∏ –∏ "
		"–ø—Ä–∏–Ω–µ—Å—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞—Ç—å—é –∏–∑ –µ—ë —Ä—É—Å—Å–∫–æ—è–∑—ã–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞\\. \\(–ò –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –ø—ã–ª–∏ –Ω–∞ –ª–∞–ø–∫–∞—Ö\\)"
	], [
		'–ü—Ä–∏–¥—É–º–∞—é —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ üòé',

		'\"num\" –∏ –¥–≤–∞ —á–∏—Å–ª–∞-–≥—Ä–∞–Ω–∏—Ü—ã',

		'num 1 10',

		'–í–≤–µ–¥–∏ \"num\", –∞ –ø–æ—Å–ª–µ ‚Äî –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\\. –û–Ω–∏ –∑–∞–¥–∞—é—Ç –≥—Ä–∞–Ω–∏—Ü—ã –≤ –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª—É—á–∏–≤—à–µ–µ—Å—è —á–∏—Å–ª–æ'
	], [
		'–û—Ç–≤–µ—á—É –Ω–∞ –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å üòè',

		'–í–æ–ø—Ä–æ—Å, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–π—Å—è –Ω–∞ \"?\"',

		'–•–æ—á–µ—à—å —Ä–µ–∑–≤–∏—Ç—å—Å—è, –õ–∏—Å—ë–Ω–æ–∫?',

		"–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π \"–∏–ª–∏\" \\(–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å "
		"–æ–¥–Ω–æ—Å–ª–æ–∂–Ω–æ, –∞ —Ç–æ —è –ø–æ–∫–∞ –µ—â—ë –ø–ª–æ—Ö–æ –ø–æ–Ω–∏–º–∞—é —á–µ–ª–æ–≤–µ—á–∏–π –∏ –Ω–µ –º–æ–≥—É —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ üòñ\\)"
	], [
		'–ü–æ–∏–≥—Ä–∞—é –≤ —Å–æ–≤–µ—Ç—á–∏–∫–∞ ü§†',

		'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ \"–∏–ª–∏\"',

		'–†—ã–∂–∏–π –∏–ª–∏ –û–≥–Ω–µ–Ω–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π?',

		"–ù–µ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ\\-—Ç–æ? –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Å–ª–æ–≤–æ–º \"–∏–ª–∏\", –∏ —è, –æ–±–Ω—é—Ö–∞–≤ –∏ –≤–∑–≤–µ—Å–∏–≤ –≤—Å–µ –∑–∞ –∏ –ø—Ä–æ—Ç–∏–≤, –≤—ã–±–µ—Ä—É –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö\\!"
	], [
		'–ë—É–¥—É —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º ü§ó',

		'–ù–∞–ø–∏—à–∏ \"timer\" –∏ –≤—Ä–µ–º—è –ø–æ —à–∞–±–ª–æ–Ω—É 00h00m0s',

		'timer (–õ–∏—Å –≤–∞—Ä–∏—Ç –±–æ—Ä—â) 1h5m',

		'–í–≤–µ–¥–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É \"timer\", –∑–∞—Ç–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –≤ —Å–∫–æ–±–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ç–∞–π–º–µ—Ä–µ: \\(—Ç–µ–∫—Å—Ç üò≥\\) '
		'–∏ –ø–æ—Å–ª–µ –≤—Ä–µ–º—è –ø–æ —à–∞–±–ª–æ–Ω—É: \"' + markdown.code("A") + 'h' + markdown.code("B") +
		'm' + markdown.code("C") + 's\" , –≥–¥–µ –ê \\- —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤, –í \\- —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç, –° \\- —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ '
		'—Å–µ–∫—É–Ω–¥\\. –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å \"20m5s\" –∏–ª–∏ \"100s\"\\.'
		'\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω—ã–π, –ø–æ—ç—Ç–æ–º—É –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\\! üòØ'
		'\n\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä –≤–≤–µ–¥–∏ inline\\-–∫–æ–º–∞–Ω–¥—É \"stop timer\"\\ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω–∏–º'
	], [
		'–°—Ç–∞–Ω—É –æ—Ü–µ–Ω—â–∏–∫–æ–º —á–µ–≥–æ-–ª–∏–±–æ ü§©',

		'\"rate\" –∏ —Ç–æ, —á—Ç–æ —è –¥–æ–ª–∂–µ–Ω –æ—Ü–µ–Ω–∏—Ç—å ',

		'rate —à–µ—Ñ–±—É—Ä–≥–µ—Ä',

		"–ù–∞–ø–∏—à–∏ \"rate\" –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–¥–∞—Ç—å –Ω–∞ –æ—Ü–µ–Ω–∫—É \\(~—Ä–∞—Å—Ç–µ—Ä–∑–∞–Ω–∏–µ~\\)\\.üò∂ "
	], [
		'–°–∫–∏–Ω—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –≤–∏–¥–µ–æ –∏–∑ YT üòã',

		'\"yt\" –∏–ª–∏ \"youtube\"',

		'yt',

		"–í–≤–µ–¥–∏ \"yt\" –∏–ª–∏ \"youtube\", —á—Ç–æ–±—ã —è –ø—Ä–∏–Ω—ë—Å —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ —Å —é—Ç—É–±–∞, –∫–æ—Ç–æ—Ä–æ–µ —è –Ω–µ–¥–∞–≤–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª"

	], [
		'QR-–∫–æ–¥ ü§´',

		'\"qr\" –∏ —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å',

		r'qr @rnfoxbot ‚Äî —Å–∞–º—ã–π —É–º–Ω—ã–π –∏ –º–∏–ª—ã–π –õ–∏—Å—ë–Ω–æ–∫ –≤–æ –≤—Å—ë–º –¢–µ–ª–µ–≥—Ä–∞–º–µ!',

		'–ù–∞–ø–∏—à–∏ \"qr\" –∏ –∑–∞—Ç–µ–º —Ç–æ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤ qr\\-–∫–æ–¥\\. –Ø –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–º –≤–∫—É—Å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É\\-–∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ'
	], [
		'–ò–ª–∏ —É –õ–∏—Å—ë–Ω–∫–∞ –≤ –õ–°:',

		'',

		'',

		'–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç—ç–≥—É @rnfoxbot –∏–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ t\\.me/rnfoxbot –∏ –ø–æ–Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ \\(–¥–ª—è –Ω–∞—á–∞–ª–∞ \\start\\)'
		''
	], [
		'–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞',

		'/–¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä',

		'',

		'–õ–∏—Å—ë–Ω–æ–∫ –Ω–∞—Ä–∏—Å—É–µ—Ç –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –µ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ\\. '
		'–í—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –õ–∏—Å—ë–Ω–∫–æ–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏, —Ç–∞–∫, —á—Ç–æ —Ç—ã –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—à—å—Å—è'
	], [
		'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞',

		'/qr',

		'',

		'–õ–∏—Å—ë–Ω–æ–∫ –∑–∞–∫–æ–¥–∏—Ä—É–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã –µ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ \\(—É—á—Ç–∏—Ç–µ, —á—Ç–æ –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å QR\\-–∫–æ–¥–æ–≤ –æ—á–µ–Ω—å –Ω–µ–≤–µ–ª–∏–∫–∞\\)'
	],
		# [
		#   '–ò–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –±–æ—Ç–æ–º:',
		#
		#   '',
		#
		#   '',
		#
		#   ''
		# ], [
		#   '–ò–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –±–æ—Ç–æ–º:',
		#
		#   '',
		#
		#   '',
		#
		#   ''
		# ]
	]

# TODO: –°–¥–µ–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∏ –∫—Ä–∞—Å–∏–≤—ã–π /start


@dp.inline_handler(regexp=r'(?i)^help$|^\s*$')
async def helpInlineHandler(inline_query: InlineQuery):

	items = [
		InlineQueryResultArticle(
			id=str(i),
			title=helpList[i][0],
			description=helpList[i][1],
			thumb_url=helpImages[i % 5],
			input_message_content=InputTextMessageContent(helpList[i][-1], parse_mode='MarkdownV2'),
			reply_markup= InlineKeyboardMarkup().
				insert(InlineKeyboardButton(
					'–ü–æ–ø—Ä–æ–±—É–π!',
					switch_inline_query_current_chat=helpList[i][2]
					)
				) if helpList[i][2] else None,

		)
		for i in range(len(helpList))
	]

	await bot.answer_inline_query(inline_query.id, results=items, cache_time=999999)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ "Who am I?" Inline Query
@dp.inline_handler(regexp=r'(?i)who\s*am\s*i')
async def whoIAmInlineHandler(inline_query: InlineQuery):
	LGBTQKAplus = [
		"–ì–µ–π", "–ü–∏–¥–æ—Ä–∞—Å", "–õ–µ—Å–±–∏—è–Ω04–∫–∞", "FTM —Ç—Ä–∞–Ω—Å–≥–µ–Ω–¥–µ—Ä", "MTF —Ç—Ä–∞–Ω—Å–≥–µ–Ω–¥–µ—Ä",
		"–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä", "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ \"–†–∞–¥—É–≥–∞\"", "–ë–∏", "–ö–≤–∏—Ä—á–∏–∫", "–ê–ø–µ–ª—å—Å–∏–Ω", "–í–µ—Ä—Ç–æ–ª—ë—Ç –ê–ü–ê–ß–ò", "Big Poppa",
		"Small Joppa", "–ê–≥–µ–Ω–¥–µ—Ä", "–ê—Å–µ–∫—Å—É–∞–ª", "–ö–∏–º 5+", "–õ–æ—Ö", "–í–∞–ª—è –ë–µ–ª—è–µ–≤", "–ì–æ–ª—É–±–æ–π", "–§–∞–Ω–∞—Ç –∑–µ–ª—ë–Ω–æ–≥–æ –≥–µ–π —Ñ–ª–∞–≥–∞",
		"–∑–∞–±–∞–Ω–µ–Ω—ã –≤ —Ç–≤–∏—Ç—Ç–µ—Ä–µ"
	]

	answer = choice(LGBTQKAplus)
	print(answer)

	items = [
		InlineQueryResultArticle(
			id=str(time()),
			title='–ö—Ç–æ —è –∏–∑ —Å—É–ø–µ—Ä—Å–µ–º–µ–π–∫–∏?',
			description='*c–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç—Ä–∏–≥–∏*',
			thumb_url='https://i.ibb.co/PmrJZxc/1280px-Gay-Pride-Flag-svg.png',
			input_message_content=InputTextMessageContent(f"–í—ã {answer}!"))
	]
	await bot.answer_inline_query(inline_query.id, results=items, cache_time=0)


@dp.inline_handler(regexp=r'(?i)me\s+.+')
async def meInlineQueryHandler(inline_query: InlineQuery):
	text = inline_query.query
	text = text.strip().replace("  ", " ").replace("me", "")
	messToUser = markdown.bold(f"–õ–∏—Å—ë–Ω–æ–∫{text}")

	items = [
		InlineQueryResultArticle(
			id=str(time()),
			title='–õ–∏—Å—ë–Ω–æ–∫ ',
			description=text,
			thumb_url=foxLogoPreview,
			input_message_content=InputTextMessageContent(messToUser, parse_mode='MarkdownV2'))
	]

	await bot.answer_inline_query(inline_query.id, results=items, cache_time=0)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –î–∞\–ù–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å Inline Query
@dp.inline_handler(regexp=r'(?i)^(?=.*?\?)((?!–∏–ª–∏|or).)*$')
async def questionInlineQueryHandler(inline_query: InlineQuery):
	answer = yesOrNot()
	messToUser = markdown.bold(inline_query.query) + '\n' + markdown.italic(answer)

	items = [
		InlineQueryResultArticle(
			id=str(time()),
			title='–õ–∏—Å —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä...',
			description=inline_query.query,
			thumb_url=foxLogoPreview,
			input_message_content=InputTextMessageContent(messToUser, parse_mode='MarkdownV2'))
	]

	await bot.answer_inline_query(inline_query.id, results=items, cache_time=0)


@dp.inline_handler(regexp=r'(?i)(.+\b–∏–ª–∏|or\b.+)+')
async def OrInlineQueryHandler(inline_query: InlineQuery):
	answer = orDecider(inline_query.query).capitalize()
	messToUser = markdown.bold(inline_query.query) + '\n' + markdown.italic(answer)

	items = [
		InlineQueryResultArticle(
			id=str(time()),
			title='–õ–∏—Å –≤—ã–±—Ä–∞–ª —Å–ª–æ–≤–æ...',
			description=inline_query.query,
			thumb_url=foxLogoPreview,
			input_message_content=InputTextMessageContent(messToUser, parse_mode='MarkdownV2'))
	]

	await bot.answer_inline_query(inline_query.id, results=items, cache_time=0)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Ä–æ—Ä—ã Inline Query
@dp.inline_handler(regexp=r'(?i)^\s*popa|–ø–æ–ø–∞\s+\d+')
async def popaInlineQueryHandler(inline_query: InlineQuery):
	_str = inline_query.query
	_str = re.sub(r'(?i)popa|–ø–æ–ø–∞', '', _str)
	num = int(_str.strip())

	answer = randomPopGenerator(num).strip().capitalize()
	messToUser = markdown.bold(answer)

	items = [
		InlineQueryResultArticle(
			id=str(time()),
			title='–†–æ—Ä–æ—á–∫–∞ *flushed*',
			description=f"–∏–∑ {num} —á–∞—Å—Ç–µ–π!!1",
			thumb_url=foxLogoPreview,
			input_message_content=InputTextMessageContent(messToUser, parse_mode='MarkdownV2'))
	]

	await bot.answer_inline_query(inline_query.id, results=items, cache_time=0)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Ä–æ—Ä—ã Inline Query
@dp.inline_handler(regexp=r'(?i)num\s+-*\d+\s+-*\d+')
async def randNumInlineQueryHandler(inline_query: InlineQuery):
	num = [int(i) for i in inline_query.query.lower().replace("num", "").split()]

	randomNumber = str(randint(num[0], num[1]))
	messToUser = markdown.italic(f"–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {num[0]} –¥–æ {num[1]}:") + '\n' + \
	             markdown.bold(f'{randomNumber}')
	items = [
		InlineQueryResultArticle(
			id=str(time()),
			title=f'–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {num[0]} –¥–æ {num[1]}:',
			thumb_url=foxLogoPreview,
			description=f"{num[0]}, {num[1]}\n"
			            f"–ß—Ç–æ –∂–µ –æ–Ω –≤—ã–±–µ—Ä–µ—Ç?",
			input_message_content=InputTextMessageContent(messToUser, parse_mode='MarkdownV2'))
	]

	await bot.answer_inline_query(inline_query.id, results=items, cache_time=0)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ç–µ–π—à–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π Inline Query
@dp.inline_handler(regexp=r'[\s\d\.\,\/\*\-\+\(\)]+=$')
async def calculationInlineQueryHandler(inline_query: InlineQuery):
	answer = str(eval(inline_query.query.replace("=", "").replace(",", ".")))
	messToUser = markdown.code(inline_query.query.replace(" ", "")) + markdown.code(answer)

	items = [
		InlineQueryResultArticle(
			id=str(time()),
			title='–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π:',
			thumb_url='https://i.ibb.co/QmWSC1N/Untitled-2.png',
			description=answer,
			input_message_content=InputTextMessageContent(messToUser, parse_mode='MarkdownV2'))
	]

	await bot.answer_inline_query(inline_query.id, results=items, cache_time=50000000)


@dp.inline_handler(regexp=r'(?i)^\s*gay\b.+')
async def howMuchInlineQueryHandler(inline_query: InlineQuery):
	answer = randint(0, 100)

	# TODO: –¥–æ–¥–µ–ª–∞—Ç—å —É–∂–µ –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ gay (–¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ)

	_str = inline_query.query
	_str = re.sub(r'(?i)\s*gay\b\s+', '', _str)

	messToUser = markdown.italic(f"{_str} –≥–µ–π –Ω–∞ {answer}%")

	items = [
		InlineQueryResultArticle(
			id=str(time()),
			title=f'–ù–∞—Å–∫–æ–ª—å–∫–æ {_str} –≥–µ–π?',
			description="–Ω–∞–∂–º–∏, –µ—Å–ª–∏ –ª—é–±–∏—à—å –º–∞–º—É",
			thumb_url='https://i.ibb.co/PmrJZxc/1280px-Gay-Pride-Flag-svg.png',
			input_message_content=InputTextMessageContent(message_text=messToUser, parse_mode='MarkdownV2'))
	]

	await bot.answer_inline_query(inline_query.id, results=items, cache_time=9999999999)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ü–µ–Ω–∫–∏ Inline Query
@dp.inline_handler(regexp=r'(?i)rate\b\b.*')
async def RateInlineQueryHandler(inline_query: InlineQuery):
	item = inline_query.query.lower().replace("rate", '').strip()
	messToUser = randomRating(item)

	items = [
		InlineQueryResultArticle(
			id=str(time()),
			title='–õ–∏—Å–∏–∫ –≤—ã–Ω–µ—Å –≤–µ—Ä–¥–∏–∫—Ç!',
			description=f'—á—Ç–æ –∂–µ –æ–Ω –¥—É–º–∞–µ—Ç –æ {item}???',
			thumb_url=foxLogoPreview,
			input_message_content=InputTextMessageContent(messToUser, parse_mode='MarkdownV2'))
	]

	await bot.answer_inline_query(inline_query.id, results=items, cache_time=0)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–∏–¥–µ–æ —Å YouTube Inline Query
@dp.inline_handler(regexp=r'(?i)yt|youtube')
async def youtubeInlineQueryHandler(inline_query: InlineQuery):
	randomYoutubeVideo = await getRandomYoutubeVideo(ytApiKey)
	items = [
		InlineQueryResultArticle(
			id=str(time()),
			title='–°–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ —Å YouTube',
			description='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –õ–∏—Å–∞',
			thumb_url='https://i.ibb.co/RDttyBT/youtube-logo-png-2069.png',
			input_message_content=InputTextMessageContent(randomYoutubeVideo))
	]

	await bot.answer_inline_query(inline_query.id, results=items, cache_time=0)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –í–∏–∫–∏–ø–µ–¥–∏–∏ Inline Query
@dp.inline_handler(regexp=r'(?i)wiki|wikipedia')
async def wikiInlineQueryHandler(inline_query: InlineQuery):
	randomWikiArticle = await getRandomWikiArticle()
	items = [
		InlineQueryResultArticle(
			id=str(time()),
			title='–°–ª—É—á–∞–π–Ω–∞—è —Å—Ç–∞—Ç—å—è –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏',
			description='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –õ–∏—Å–∞',
			thumb_url='https://i.ibb.co/S6mcw2F/1200px-Wikipedia-logo-svg-svg.png',
			input_message_content=InputTextMessageContent(randomWikiArticle))
	]

	await bot.answer_inline_query(inline_query.id, results=items, cache_time=0)
